package com.redhat.tools.vault.web;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.regex.Pattern;
import javax.inject.Inject;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import net.sf.json.JSONObject;
import org.apache.commons.lang.StringEscapeUtils;
import com.redhat.tools.vault.bean.Request;
import com.redhat.tools.vault.service.ReplyService;
import com.redhat.tools.vault.service.RequestService;

/**
 * @author wezhao
 * Servlet implementation class HomeServlet
 */
@WebServlet("/ShowReplyComment")
public class ShowRequestServlet extends HttpServlet {
	
	private static final long serialVersionUID = 1L;
	
	@Inject 
	private ReplyService service;

    /**
     * Default constructor. 
     */
    public ShowRequestServlet() {
    }

	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		doPost(request,response);
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
<<<<<<< HEAD
		String userName=(String) request.getSession().getAttribute("userName");
		String userEmail=(String) request.getSession().getAttribute("userEmail");
		response.setContentType("text/html;charset=UTF-8");
		response.setHeader("Cache-Control", "no-chche");
		JSONObject joReturn = new JSONObject();
		String requestid = (String) request.getParameter("requestid");
		String historyid = (String) request.getParameter("historyid");
		joReturn=service.ShowReply(requestid, historyid);
		response.getWriter().print(joReturn);
=======
		String userName="wguo";
		String userEmail="wezhao@redhat.com";
		String operation=request.getParameter("operation");
		operation=operation==null?"":operation;
		response.setContentType("text/html;charset=UTF-8");
		response.setHeader("Cache-Control", "no-chche");
		if("FindRequest".equalsIgnoreCase(operation)){
			JSONObject joReturn=service.findRequest();
			response.getWriter().print(joReturn);
		}else if("CanViewRequest".equalsIgnoreCase(operation)){
		    List<Request> canViewRequests = service.getCanViewRequests(userName, userEmail);
	        request.setAttribute("canViewRequests", canViewRequests);
	        request.setAttribute("operationstatus", "CanView");
	        request.getRequestDispatcher("/jsp/home.jsp").forward(request, response);
		}else if("WaitRequest".equalsIgnoreCase(operation)){
		    List<Request> waitRequests = service.getCanViewRequests(userName, userEmail);
	        request.setAttribute("waitRequests", waitRequests);
	        request.setAttribute("operationstatus", "wait");
            request.getRequestDispatcher("/jsp/home.jsp").forward(request, response);
		}else if("SignedRequest".equalsIgnoreCase(operation)){
		    List<Request> signedOffRequests = service.getSignedOffRequests(userName, userEmail);
	        request.setAttribute("signedOffRequests", signedOffRequests);
	        request.setAttribute("operationstatus", "signed");
            request.getRequestDispatcher("/jsp/home.jsp").forward(request, response);
		}else if("CCToMeRequest".equalsIgnoreCase(operation)){
		    List<Request> ccToMeRequests = service.getCCToMeRequests(userName, userEmail);
		    request.setAttribute("ccToMeRequests", ccToMeRequests);
		    request.setAttribute("operationstatus", "cctome");
		    request.getRequestDispatcher("/jsp/home.jsp").forward(request, response);
		}else if("MyRequest".equalsIgnoreCase(operation)){
		    List<Request> myRequests = service.getMyRequest(userName);
		    request.setAttribute("myRequests", myRequests);
		    request.setAttribute("operationstatus", "myrequest");
		    request.getRequestDispatcher("/jsp/home.jsp").forward(request, response);
		}else if("NewRequest".equalsIgnoreCase(operation)){
		    request.setAttribute("operationstatus", "newrequest");
            request.getRequestDispatcher("/jsp/home.jsp").forward(request, response);
		}else if("Search".equalsIgnoreCase(operation)){
		    String          requestName       =   (String) request.getParameter("requestName");
            String          type            =   (String) request.getParameter("type");
            String          creator         =   (String) request.getParameter("creator");
            String          versionid       =   (String) request.getParameter("versionid");
            String          productid       =   (String) request.getParameter("productid");
            String          status          =   (String) request.getParameter("status");
            String          owneremail      =   (String) request.getParameter("owneremail");
		    List<Request> requests = service.advanceSearch(requestName, creator, versionid, productid, status, owneremail, userName, userEmail);
		    request.setAttribute("searchRequests", requests);
            request.setAttribute("is_search", "is_search");
            request.getRequestDispatcher("/jsp/home.jsp").forward(request, response);
		}else{
			String requestid=request.getParameter("requestid");
			List<Request> detailRequests=service.getDetailRequest(requestid);
			String detailRequestName = null;
			Integer detailPublic = null;
			Request detailRequest = null;
			String detailCreator = null;
			String detailCCList = null;
			Boolean isEditable = false;
			Boolean isSignatory = false;
			Boolean displaySignoffOnBehalf = false;
			String requestName_unescape = null;
	
			boolean judgeDetailValue = false;
			if(detailRequests != null && detailRequests.size() > 0){
			    detailRequest = detailRequests.get(0);
			    Boolean isCreator = false;
			    Boolean isOwner = false;
			    Boolean isCC = false;
			    String detailOwnerList = null;
			    detailPublic = detailRequest.getIs_public();
			    detailCreator = detailRequest.getCreatedby();
			    detailCCList = detailRequest.getForward();
			    detailOwnerList = detailRequest.getOwner();
			    if(detailCreator != null && detailCreator.equals(userName)){
			            isCreator = true;
			    }        
			    if(detailOwnerList != null){
			            isOwner = Pattern.compile(userEmail).matcher(detailOwnerList).find();
			    }
			    if(detailCCList != null){
			            isCC = Pattern.compile(userEmail).matcher(detailCCList).find();
			    }
			    
			    if(detailPublic == 1 || isCreator || isOwner || isCC){
			            detailRequestName = detailRequest.getRequestname();
			            requestName_unescape = StringEscapeUtils.unescapeHtml(detailRequestName);
			            isEditable = detailRequest.displayEditButton(userName);
			            isSignatory = service.displaySignButton(userName,detailRequest.getRequestid());
			            displaySignoffOnBehalf=service.displaySignOnBehalfButton(userName,detailRequest.getRequestid());
			            judgeDetailValue = true;
			    }
			}
			request.setAttribute("detailRequest",detailRequest);
			request.setAttribute("isSignatory", isSignatory);
			request.setAttribute("isEditable", isEditable);
			request.setAttribute("displaySignoffOnBehalf", displaySignoffOnBehalf);
			request.setAttribute("requestName_unescape", requestName_unescape);
			request.setAttribute("judgeDetailValue", judgeDetailValue);
			request.getRequestDispatcher("/jsp/home.jsp").forward(request, response);
		}
>>>>>>> filter module
	}
}
